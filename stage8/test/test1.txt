type
    bst{
        int a;
        bst left;
        bst right;
    }
endtype
class
    bstclass{
        decl
            bst root;
            bstclass check;
            int a,b;
            bst root2;
            int init();
            bst getroot();
            int setroot(bst n1);
            bst getnode(int key);
            bst insert(bst h, int key);
            int inOrder_fun(bst h);
            int preOrder_fun(bst h);
            int postOrder_fun(bst h);
        enddecl

        bst insert(bst h, int key){
            decl
            enddecl
            begin
                if (h == null) then
                    h = self.getnode(key);
                else
                    if (key < h.a) then
                        h.left = self.insert(h.left, key);
                    else
                        if (key > h.a) then
                            h.right = self.insert(h.right, key);
                        endif;
                    endif;
                endif;
                return h;
            end
        }

        int postOrder_fun(bst h){
            decl
                int in;
            enddecl
            begin
                if(h!= null) then
                    in=self.postOrder_fun(h.left);
                    in=self.postOrder_fun(h.right);
                    write(h.a);
                endif;
                return 1;
            end
        }
    }
endclass